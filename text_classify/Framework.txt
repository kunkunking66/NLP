1. 数据处理（data_processing）
    1. 读取表格中的数据（预处理后将review分词 统计分类和标签） --- 异常处理（try exception）
    2. 创建目录保存数据（保存.json文件和.csv文件）
    3. 加载和标注数据
    4. 分割训练集和测试集并保存数据

2. 函数方法（utils）
    1. 处理文本分类任务中的数据，包括数据加载、长度计算和数据填充
    2. 在训练过程中批量加载数据

3. 模型构建（fc_model）
    1. 初始化
    2. 提取文本特征（嵌入层+线性层+激活层）
    3. 类别预测（线性层）
    4. 定义前向传播

4. 训练（training）
    1. 初始化训练函数并获取训练数据
    2. 模型创建（定义优化器损失函数 TensorBoard日志记录）
    3. 数据迭代训练
    4. 模型评估并保存

5. 导出 (export)
    1. 设置输出目录和文件名
    2. 将pytorch模型转化为 torch script/ onnx 模型
    3. 测试预测结果

6. 预测 (predict)
    1. 创建predictor类
    2. 分词
    3. 导入分词的结果和模型
    4. 预测并计算概率

7. 部署服务 (server)
    1. 使用Flask框架创建的简单Web服务器
    2. 定义了预测路由，支持GET和POST请求

8. 测试 (client_demo)
    1. 定义预测文本和请求的URL
    2. 发送post请求
    3， 处理响应数据
